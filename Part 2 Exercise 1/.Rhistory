lines(fit6$mean, col=5)
lines(fit7$mean, col=2)
?holt
fit6 <- holt(visitors, lambda=lambda, biasadj=TRUE, h = 24);fit6
plot(fit5, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(fit5$mean, col=4)
lines(fit6$mean, col=5)
lines(fit7$mean, col=2)
fit1$model
fit2$model
?ses
?additive.only
fit6 <- ses(visitors, lambda=lambda, h = 24, additive.only=TRUE);fit6
lambda <- BoxCox.lambda(visitors)
fit6 <- ses(visitors, lambda=lambda, h = 24, additive.only=TRUE);fit6
plot(fit5, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(fit5$mean, col=4)
lines(fit6$mean, col=5)
lines(fit7$mean, col=2)
fit6 <- ses(visitors, lambda=lambda, h=24);fit6
plot(fit5, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(fit5$mean, col=4)
lines(fit6$mean, col=5)
lines(fit7$mean, col=2)
?BoxCox.lambda
oildata <- window(oil, start = 1996, end = 2007)
fit <- ets(oildata, model = "ANN")
plot(forecast(fit, h=3), ylab="Oil (millions of tones)")
summary(fit)
ls(fit)
#list names of the objects in the specified environment
fit$par
vndata <- window(austourists, start = 2005)
fit <- ets(vndata)
summary(fit)
plot(fit)
plot(forecast(fit, h = 8), ylab = "International visitor night in Australia (millions)")
?ets
fit5 <- ets(visitors, model='NNN', h = 24)
fit5 <- ets(visitors, model='ANN', h = 24)
fit5 <- ets(visitors, model='ANN')
lambda <- BoxCox.lambda(visitors)
fit6 <- ets(visitors, model='ANN', lambda=lambda)
boxcox_visitors <- BoxCox(visitors, lambda)
decomposed <- decompose(boxcox_visitors)
seasonal_visitors <- decomposed$seasonal
fit7 <- ets(seasonal_visitors, model='NNN')
fit7 <- ets(seasonal_visitors, model='ANN')
plot(forecast(fit5), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(fit5$mean, col=4)
lines(fit6$mean, col=5)
lines(fit7$mean, col=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(forecast(fit7)$mean, col=2)
?decompose
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda)
fit7 <- ets(stl, model='ANN')
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda);stl
?stlm
paperback <- books[,1]
# Fit a forecasting model with exponential smoothing using different alphas
fit1 <- ses(paperback, alpha = 0.0, initial = 'simple', h = 4)
fit2 <- ses(paperback, alpha = 0.2, initial = 'simple', h = 4)
fit3 <- ses(paperback, alpha = 0.4, initial = 'simple', h = 4)
fit4 <- ses(paperback, alpha = 0.6, initial = 'simple', h = 4)
fit5 <- ses(paperback, alpha = 0.8, initial = 'simple', h = 4)
fit6 <- ses(paperback, alpha = 1.0, initial = 'simple', h = 4)
# Plot the model
plot(fit1, plot.conf=FALSE, ylab='Number of sales', xlab='Day', main='', fcol='white', type='o')
lines(fitted(fit1), col=5, type='o')
lines(fitted(fit2), col=3, type='o')
lines(fitted(fit3), col=4, type='o')
lines(fitted(fit4), col=2, type='o')
lines(fitted(fit5), col=6, type='o')
lines(fitted(fit6), col=7, type='o')
# Plot the forecasts
lines(fit1$mean, col=5, type='o')
lines(fit2$mean, col=3, type='o')
lines(fit3$mean, col=4, type='o')
lines(fit4$mean, col=2, type='o')
lines(fit5$mean, col=6, type='o')
lines(fit6$mean, col=7, type='o')
legend('topleft',lty=1, col=c(1,5,3,4,2,6,7), c('data', expression(alpha == 0.0), expression(alpha == 0.2),
expression(alpha == 0.4), expression(alpha == 0.6), expression(alpha == 0.8),
expression(alpha == 1)),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Compare the results
fit1$model
fit2$model
fit3$model
fit4$model
fit5$model
fit6$model
# Record the within-sample SSE for the one-step forecasts. Plot SSE against Î± and find which value
data(visitors)
plot(visitors,main='',ylab='Thousands of people',xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Seasonal plot
seasonplot(visitors,main='',ylab='Thousands of people',xlab='Month', year.labels=TRUE,
year.labels.left=TRUE,col=1:7, pch=19)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Month plot
monthplot(visitors,main='',ylab='Thousands of people',xlab='Month')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ----------------------------------------------------------------------------------------------------
# (b) Forecast the next two years using Holt-Winters' multiplicative method.
# Fit a forecasting model with HW multiplicative method
fit1 <- hw(visitors,seasonal='multiplicative')
# Plot the model
plot(fit1, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit1), col=4, lty=2)
lines(fit1$mean, col=4)
legend('topleft',lty=1, col=c(1,4), c('data', 'Holt-Winters Multiplicative'),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Results from the model
fit1$model
accuracy(fit1)
# ----------------------------------------------------------------------------------------------------
# (d) Experiment with making the trend exponential and/or damped.
fit1 <- hw(visitors,seasonal='multiplicative')
fit2 <- hw(visitors,seasonal='multiplicative',exponential=TRUE)
fit3 <- hw(visitors,seasonal='multiplicative',damped=TRUE)
fit4 <- hw(visitors,seasonal='multiplicative',exponential=TRUE,damped=TRUE)
plot(fit1, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit1), col=4, lty=2)
lines(fitted(fit2), col=5, lty=2)
lines(fitted(fit3), col=3, lty=2)
lines(fitted(fit4), col=2, lty=2)
lines(fit1$mean, col=4)
lines(fit2$mean, col=5)
lines(fit3$mean, col=3)
lines(fit4$mean, col=2)
legend('topleft',lty=1, col=c(1,4,5,3,2), c('data','Holt-Winters Multiplicative','Exponential Trend',
'Damped Trend','Exp and Damped Trend'),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Compare the results
fit1$model
fit2$model
fit3$model
fit4$model
r1<-fit1$model
r2<-fit2$model
r3<-fit3$model
r4<-fit4$model
xtable(r1)
fit5 <- ets(visitors, model='ANN')
lambda <- BoxCox.lambda(visitors)
fit6 <- ets(visitors, model='ANN', lambda=lambda)
fit7 <- forecast(stl, lambda=stl$lambda)
plot(forecast(fit5), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(forecast(fit7)$mean, col=2)
plot(fit5, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
plot(fit5, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fit7$mean, col=2)
res5 <- residuals(fit5);res5
plot(res5, main='',ylab='Residuals', xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res5, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF for ETS
res5 <- residuals(fit5);res5
tsdisplay(res5, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# (2) an additive ETS model applied to a Box-Cox transformed series
# Residuals plot
res6 <- residuals(fit6);res6
plot(res6, main='',ylab='Residuals', xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res6, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF from additive ETS
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
fit1 <- hw(visitors,seasonal='multiplicative')
plot(fit1, plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit1), col=4, lty=2)
lines(fitted(fit2), col=5, lty=2)
lines(fitted(fit3), col=3, lty=2)
lines(fitted(fit4), col=2, lty=2)
lines(fit1$mean, col=4)
a1<-accuracy(fit1);a1
res1 <- residuals(fit1);res1
tsdisplay(res1, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
fit5 <- ets(visitors, model='ANN');fit5
lambda <- BoxCox.lambda(visitors)
fit6 <- ets(visitors, model='ANN', lambda=lambda);fit6
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda);stl
fit7 <- forecast(stl, lambda=stl$lambda)
fit7 <- forecast(stl, lambda=stl$lambda);fit7
plot(forecast(fit5), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white', h=24)
plot(forecast(fit5), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4, h=24)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
plot(forecast(fit5), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
res5 <- residuals(fit5);res5
tsdisplay(res5, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res7 <- residuals(fit7);res7
tsdisplay(res7, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
par(mfrow = c(1, 3))
# Histogram of residuals ETS
hist(res5, breaks=20, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals additive ETS
hist(res6, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals STL and ETS
hist(res7, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
dev.off()
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
legend('topleft',lty=1, col=c(1,4,5,2), c('data','ETS','Additive ETS','STL and ETS'),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
fit5 <- ets(visitors)
lambda <- BoxCox.lambda(visitors)
fit6 <- ets(visitors, model='AAZ', lambda=lambda)
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda);stl
fit7 <- forecast(stl, lambda=stl$lambda)
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
res5 <- residuals(fit5);res5
tsdisplay(res5, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res7 <- residuals(fit7);res7
tsdisplay(res7, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
fit5$model
summary(fit5)
plot((fitted(fit5)), residuals(fit5))
fit5 <- ets(visitors);fit5
# (2) an additive ETS model applied to a Box-Cox transformed series
lambda <- BoxCox.lambda(visitors)
fit6 <- ets(visitors, lambda=lambda);fit6
# (3) an STL decomposition applied to the Box-Cox transformed data followed by an ETS
# model applied to the seasonally adjusted (transformed) data.
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda);stl
fit7 <- forecast(stl, lambda=stl$lambda);fit7
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
legend('topleft',lty=1, col=c(1,4,5,2), c('data','ETS','Additive ETS','STL and ETS'),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res5 <- residuals(fit5);res5
tsdisplay(res5, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res7 <- residuals(fit7);res7
tsdisplay(res7, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
par(mfrow = c(1, 3))
# Histogram of residuals ETS
hist(res5, breaks=20, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals additive ETS
hist(res6, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals STL and ETS
hist(res7, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
fit6 <- ets(visitors, model='AAZ', lambda=lambda);fit6
# (3) an STL decomposition applied to the Box-Cox transformed data followed by an ETS
# model applied to the seasonally adjusted (transformed) data.
stl <- stlm(visitors, robust=TRUE, method=c('ets'), lambda=lambda);stl
fit7 <- forecast(stl, lambda=stl$lambda);fit7
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
dev.off()
plot(forecast(fit5, h=24), plot.conf=FALSE, ylab='Thousands of people', xlab='Year', main='', fcol='white')
lines(fitted(fit5), col=4, lty=2)
lines(fitted(fit6), col=5, lty=2)
lines(fitted(fit7), col=2, lty=2)
lines(forecast(fit5)$mean, col=4)
lines(forecast(fit6)$mean, col=5)
lines(fit7$mean, col=2)
legend('topleft',lty=1, col=c(1,4,5,2), c('data','ETS','Additive ETS','STL and ETS'),pch=1,cex=0.8)
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res5 <- residuals(fit5);res5
plot(res5, main='',ylab='Residuals', xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res5, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF for ETS
res5 <- residuals(fit5);res5
tsdisplay(res5, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res6 <- residuals(fit6);res6
plot(res6, main='',ylab='Residuals', xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res6, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF from additive ETS
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res6, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF from additive ETS
res6 <- residuals(fit6);res6
tsdisplay(res6, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
res7 <- residuals(fit7);res7
plot(res7, main='',ylab='Residuals', xlab='Year')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# ACF of residuals plot
Acf(res7, main='')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Residuals plot, ACF an PACF for STL and ETS
res7 <- residuals(fit7);res7
tsdisplay(res7, main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
par(mfrow = c(1, 3))
# Histogram of residuals ETS
hist(res5, breaks=20, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals additive ETS
hist(res6, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
# Histogram of residuals STL and ETS
hist(res7, breaks=15, nclass='FD', main='',xlab='Residuals',col='light blue')
title(main=paste('Emilie Engen, Timestamp:',Sys.time()),cex.main=1)
?discharge
rm(list=ls())
# Load file
data <- read.csv2("January09.csv")
setwd("/Users/Emilie/Dropbox/Skole/UC3M/Bayesian Learning/Homework 3")
data <- read.csv2("January09.csv")
attach(data)
rm(list=ls())
# Load file
data <- read.csv2("January09.csv")
attach(data)
names(data)
?attach
hist(Discharge)
mean(Discharge)
sd(Discharge)
min(Discharge)
max(Discharge)
nu.min=0;
nu.max=100;
a=0.01;
b=0.01;
Define the data set
y=Discharge
n=length(y)
burnin=1000;
iters=10000
T=burnin+iters
rweibull?
?rweibull
?rweibull
?rgamma
?lgamma
names(data)
# Look at the main characteristics of the data
hist(Discharge)
mean(Discharge)
sd(Discharge)
min(Discharge)
max(Discharge)
# Assume that the discharge, Y , follows a Weibull distribution, Y |Îº, Î¸ â¼ W (Îº, Î¸)
# whose density function is given by: f(y |Îº,Î¸)=ÎºÎ¸yÎºâ1exp(âÎ¸yÎº), y >0.
# Assume e.g. the following prior distribution: Îº â¼ Uniform (Îºmin , Îºmax ) Î¸ â¼ Gamma (a, b)
# Set the prior parameters by assuming non informative priors
k_min=0
k_max=100
a=0.01
b=0.01
# Define the data set
y=Discharge
n=length(y)
# Set the number of burnin iterations and iterations in equilibrium:
burnin=1000
iters=10000
T=burnin+iters
# Initialize a vector for the values of Îº and Î¸ in the Markov chain:
k=rep(0,T)
theta=rep(0,T)
# Set initial values for the model parameters
k[1]=10
theta[1]=5
# Initialize proportion of accepted values in the MH algorithm:
pac=0
# We are ready to simulate the Markov chain
?rweibull
?lgamma
?rgamma
for (t in 2:T)
{
theta[t]=rgamma(1,shape=a+n*k[t-1],rate=b+sum(y))
k_c=rnorm(1,k[t-1],sd=1)
if(k_c<k_min || k_c>k_max){k[t]=k[t-1]}
else
{
logal=(k-1)*sum(log(y))-n*lgamma(k_c)+n*k_c*log(theta[t])
logal=logal-(k[t-1]-1)*sum(log(y))+n*lgamma(k[t-1])
logal=logal-n*k[t-1]*log(theta[t])
u=runif(1)
if (log(u)<logal)
{
k[t]=k_c
if (t>burnin){pac=pac+1}
}
else k[t]=k[t-1]
}
}
# We can calculate the proportion of accepted values:
pac=pac/iters
# We can plot the traces of the Markov chain:
ts.plot(k)
ts.plot(theta)
ts.plot(k)
ts.plot(theta)
# And obtain posterior samples in equilibrium:
k_post=k[burnin+1:iters]
theta_post=theta[burnin+1:iters]
# We can approximate the posterior distribution of the model parameters:
hist(k.post)
hist(theta.post)
hist(k_post)
hist(theta_post)
# And obtain 95% credible intervals for k and theta
quantile(k_post,c(0.025,0.975))
quantile(theta_post,c(0.025,0.975))
# We can also approximate the posterior mean and standard deviations of k and theta
mean(k_post)
sd(k_post)
mean(theta_post)
sd(theta_post)
# Obtain an approximate sample from the predictive distribution of the discharge
# and estimate the probability of a discharge larger than 1m3/sec Â· km2.
disc_pred=rweibull(M,shape=k_post,rate=theta_post)
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
M=10000
disc_pred=rweibull(M,shape=k_post,scale=1/theta_post)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
mean(disc_pred>1)
?rgamma
?rweibull
disc_pred=rweibull(M,shape=k_post,scale=1)
hist(disc_pred)
# We can compare the observed data with the estimated predictive density using:
hist(y,freq=F)
lines(density(disc_pred))
# And we can approximate the predictive probability of a discharge larger than 1m3/secÂ·km2
# using simply the mean of sampled values larger than 1:
mean(disc_pred>1)
setwd("/Users/Emilie/Dropbox/Skole/UC3M/Time Series and Forecasting/Part 2 Exercise 1")
# ----------------------------------------------------------------------------------------------------
# Clear the workspace
rm(list=ls())
data <- read.csv2("HUI.csv")
attach(data)
# Names of data
names(data)
# Look at the main characteristics of the data
hist(Discharge)
hist(data)
View(data)
data <- read.csv("HUI.csv")
names(data)
View(data)
